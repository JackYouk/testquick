// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// export $(cat .env.development.local | xargs) && npx prisma migrate dev

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  newUser            Boolean   @default(true)
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  generations        Int       @default(0)
  accounts           Account[]
  sessions           Session[]
  students           Student[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Test {
  id            String     @id @default(uuid())
  threadId      String
  owner         String
  testName      String
  createdAt     DateTime   @default(now())
  courseName    String
  courseSubject String
  status        String     @default("open")
  questions     Question[]
  responses     Response[]

  @@index([owner])
}

model Question {
  id           Int    @id @default(autoincrement())
  questionText String
  testId       String
  test         Test   @relation(fields: [testId], references: [id])

  @@index([testId])
}

model Response {
  id                Int      @id @default(autoincrement())
  studentId         String
  student           Student  @relation(fields: [studentId], references: [id])
  testId            String
  test              Test     @relation(fields: [testId], references: [id])
  questionResponses String[]
  responseGrades    Float[]
  responseFeedbacks String[]

  @@index([testId])
}

model Student {
  id            String     @id @default(uuid())
  teacherId     String
  teacher       User       @relation(fields: [teacherId], references: [id])
  studentId     String
  class         String
  name          String
  email         String     @unique
  testingStatus String     @default("in progress")
  responses     Response[]

  @@index([email])
}
